"""Create the first database

Revision ID: 1bcdf2f7e69c
Revises: 
Create Date: 2023-05-24 14:19:35.497559

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '1bcdf2f7e69c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('m_account',
    sa.Column('account_id', sa.Integer(), nullable=False, comment='アカウントID'),
    sa.Column('account_cd', sa.String(length=100), nullable=True, comment='アカウントコード:社員番号など利用企業のIDやコードのため'),
    sa.Column('ext_account_id', sa.Integer(), nullable=True, comment='外部アカウントID:cognitoなどの外部認証サービスと連携する場合は設定'),
    sa.Column('account_name', sa.String(length=100), nullable=True, comment='アカウント名'),
    sa.Column('email_address', sa.String(length=100), nullable=True, comment='メールアドレス'),
    sa.Column('account_status', sa.Integer(), server_default=sa.text('0'), nullable=False, comment='ステータス:0：仮登録、1：本登録、2：削除'),
    sa.Column('is_system_manager', sa.Boolean(), server_default=sa.text('False'), nullable=False, comment='システム管理フラグ:アプリケーションで設定/更新しないこと'),
    sa.Column('version', sa.Integer(), server_default=sa.text('1'), nullable=False, comment='バージョン:楽観的排他で利用'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='作成日時:プログラムでは設定しない'),
    sa.Column('created_by', sa.String(length=200), nullable=True, comment='作成処理:プログラムで設定、API名、関数名'),
    sa.Column('modified_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='更新日時:プログラムでは設定しない'),
    sa.Column('modified_by', sa.String(length=200), nullable=True, comment='更新処理:プログラムで設定、API名、関数名'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='削除日時'),
    sa.Column('deleted_by', sa.String(length=200), nullable=True, comment='削除'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('False'), nullable=False, comment='登録旗deleted: 0：消去未 ,1：消去済'),
    sa.PrimaryKeyConstraint('account_id')
    )
    op.create_table('m_prefecture',
    sa.Column('pref_id', sa.Integer(), nullable=False, comment='県ID'),
    sa.Column('pref_name', sa.String(length=200), nullable=True, comment='名前県'),
    sa.PrimaryKeyConstraint('pref_id')
    )
    op.create_table('m_base',
    sa.Column('base_id', sa.Integer(), nullable=False, comment='拠点ID'),
    sa.Column('base_cd', sa.String(length=200), nullable=True, comment='拠点コード'),
    sa.Column('base_name', sa.String(length=200), nullable=True, comment='拠点名'),
    sa.Column('zip_code', sa.String(length=10), nullable=True, comment='郵便番号'),
    sa.Column('pref_code', sa.Integer(), nullable=False, comment='都道府県コード'),
    sa.Column('address', sa.String(length=400), nullable=True, comment='住所'),
    sa.Column('addressee', sa.String(length=200), nullable=True, comment='受取名:配送や郵送時の受信名'),
    sa.Column('telephone_number', sa.String(length=200), nullable=True, comment='電話番号'),
    sa.Column('fax_number', sa.String(length=200), nullable=True, comment='FAX番号'),
    sa.Column('e_mail_address', sa.String(length=200), nullable=True, comment='メールアドレス'),
    sa.Column('note', sa.Text(), nullable=True, comment='備考'),
    sa.Column('version', sa.Integer(), server_default=sa.text('1'), nullable=False, comment='バージョン:楽観的排他で利用'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='作成日時:プログラムでは設定しない'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='作成処理:プログラムで設定、API名、関数名'),
    sa.Column('modified_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='更新日時:プログラムでは設定しない'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='更新処理:プログラムで設定、API名、関数名'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='削除日時'),
    sa.Column('deleted_by', sa.Integer(), nullable=True, comment='削除者'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('False'), nullable=False, comment='登録旗deleted: 0：消去未 ,1：消去済'),
    sa.ForeignKeyConstraint(['created_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['deleted_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['pref_code'], ['m_prefecture.pref_id'], ),
    sa.PrimaryKeyConstraint('base_id')
    )
    op.create_table('m_group',
    sa.Column('group_id', sa.Integer(), nullable=False, comment='グループID:1以上であること'),
    sa.Column('group_name', sa.String(length=200), nullable=True, comment='グループ名称'),
    sa.Column('group_cd', sa.String(length=200), nullable=True, comment='グループコード'),
    sa.Column('parent_group_id', sa.Integer(), server_default=sa.text('0'), nullable=False, comment='親グループID:0 は親グループが無し'),
    sa.Column('version', sa.Integer(), server_default=sa.text('1'), nullable=False, comment='バージョン:楽観的排他で利用'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='作成日時:プログラムでは設定しない'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='作成処理:プログラムで設定、API名、関数名'),
    sa.Column('modified_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='更新日時:プログラムでは設定しない'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='更新処理:プログラムで設定、API名、関数名'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='削除日時'),
    sa.Column('deleted_by', sa.Integer(), nullable=True, comment='削除者'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('False'), nullable=False, comment='登録旗deleted: 0：消去未 ,1：消去済'),
    sa.ForeignKeyConstraint(['created_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['deleted_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['m_accounts.account_id'], ),
    sa.PrimaryKeyConstraint('group_id')
    )
    op.create_table('m_operation',
    sa.Column('operation_id', sa.Integer(), nullable=False, comment='オペレーションID'),
    sa.Column('operation_name', sa.String(length=200), nullable=True, comment='オペレーション名'),
    sa.Column('version', sa.Integer(), server_default=sa.text('1'), nullable=False, comment='バージョン:楽観的排他で利用'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='作成日時:プログラムでは設定しない'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='作成処理:プログラムで設定、API名、関数名'),
    sa.Column('modified_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='更新日時:プログラムでは設定しない'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='更新処理:プログラムで設定、API名、関数名'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='削除日時'),
    sa.Column('deleted_by', sa.Integer(), nullable=True, comment='削除者'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('False'), nullable=False, comment='登録旗deleted: 0：消去未 ,1：消去済'),
    sa.ForeignKeyConstraint(['created_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['deleted_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['m_accounts.account_id'], ),
    sa.PrimaryKeyConstraint('operation_id')
    )
    op.create_table('m_role',
    sa.Column('role_id', sa.Integer(), nullable=False, comment='ロールID'),
    sa.Column('role_name', sa.String(length=200), nullable=True, comment='ロール名'),
    sa.Column('version', sa.Integer(), server_default=sa.text('1'), nullable=False, comment='バージョン:楽観的排他で利用'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='作成日時:プログラムでは設定しない'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='作成処理:プログラムで設定、API名、関数名'),
    sa.Column('modified_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='更新日時:プログラムでは設定しない'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='更新処理:プログラムで設定、API名、関数名'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='削除日時'),
    sa.Column('deleted_by', sa.Integer(), nullable=True, comment='削除者'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('False'), nullable=False, comment='登録旗deleted: 0：消去未 ,1：消去済'),
    sa.ForeignKeyConstraint(['created_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['deleted_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['m_accounts.account_id'], ),
    sa.PrimaryKeyConstraint('role_id')
    )
    op.create_table('m_account_base',
    sa.Column('account_base_id', sa.Integer(), nullable=False, comment='アカウントベースID'),
    sa.Column('account_id', sa.Integer(), nullable=True, comment='アカウントID'),
    sa.Column('base_id', sa.Integer(), nullable=True, comment='拠点ID'),
    sa.Column('version', sa.Integer(), server_default=sa.text('1'), nullable=False, comment='バージョン:楽観的排他で利用'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='作成日時:プログラムでは設定しない'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='作成処理:プログラムで設定、API名、関数名'),
    sa.Column('modified_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='更新日時:プログラムでは設定しない'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='更新処理:プログラムで設定、API名、関数名'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='削除日時'),
    sa.Column('deleted_by', sa.Integer(), nullable=True, comment='削除者'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('False'), nullable=False, comment='登録旗deleted: 0：消去未 ,1：消去済'),
    sa.ForeignKeyConstraint(['account_id'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['base_id'], ['m_base.base_id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['deleted_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['m_accounts.account_id'], ),
    sa.PrimaryKeyConstraint('account_base_id')
    )
    op.create_table('m_account_group',
    sa.Column('account_group_id', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False, comment='アカウントID'),
    sa.Column('group_id', sa.Integer(), nullable=True, comment='グループID'),
    sa.Column('is_manager', sa.Boolean(), server_default=sa.text('False'), nullable=False, comment='管理者フラグ'),
    sa.Column('version', sa.Integer(), server_default=sa.text('1'), nullable=False, comment='バージョン:楽観的排他で利用'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='作成日時:プログラムでは設定しない'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='作成処理:プログラムで設定、API名、関数名'),
    sa.Column('modified_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='更新日時:プログラムでは設定しない'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='更新処理:プログラムで設定、API名、関数名'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='削除日時'),
    sa.Column('deleted_by', sa.Integer(), nullable=True, comment='削除者'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('False'), nullable=False, comment='登録旗deleted: 0：消去未 ,1：消去済'),
    sa.ForeignKeyConstraint(['account_id'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['deleted_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['m_group.group_id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['m_accounts.account_id'], ),
    sa.PrimaryKeyConstraint('account_group_id')
    )
    op.create_table('m_account_role',
    sa.Column('account_id', sa.Integer(), nullable=False, comment='アカウントID'),
    sa.Column('role_id', sa.Integer(), nullable=True, comment='ロールID'),
    sa.Column('version', sa.Integer(), server_default=sa.text('1'), nullable=False, comment='バージョン:楽観的排他で利用'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='作成日時:プログラムでは設定しない'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='作成処理:プログラムで設定、API名、関数名'),
    sa.Column('modified_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='更新日時:プログラムでは設定しない'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='更新処理:プログラムで設定、API名、関数名'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='削除日時'),
    sa.Column('deleted_by', sa.Integer(), nullable=True, comment='削除者'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('False'), nullable=False, comment='登録旗deleted: 0：消去未 ,1：消去済'),
    sa.ForeignKeyConstraint(['account_id'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['deleted_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['m_role.role_id'], ),
    sa.PrimaryKeyConstraint('account_id')
    )
    op.create_table('m_role_operation',
    sa.Column('role_id', sa.Integer(), nullable=False, comment='ロールID'),
    sa.Column('operation_id', sa.Integer(), nullable=True, comment='オペレーションID'),
    sa.Column('version', sa.Integer(), server_default=sa.text('1'), nullable=False, comment='バージョン:楽観的排他で利用'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='作成日時:プログラムでは設定しない'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='作成処理:プログラムで設定、API名、関数名'),
    sa.Column('modified_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='更新日時:プログラムでは設定しない'),
    sa.Column('modified_by', sa.Integer(), nullable=True, comment='更新処理:プログラムで設定、API名、関数名'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='削除日時'),
    sa.Column('deleted_by', sa.Integer(), nullable=True, comment='削除者'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('False'), nullable=False, comment='登録旗deleted: 0：消去未 ,1：消去済'),
    sa.ForeignKeyConstraint(['created_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['deleted_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['modified_by'], ['m_accounts.account_id'], ),
    sa.ForeignKeyConstraint(['operation_id'], ['m_operation.operation_id'], ),
    sa.PrimaryKeyConstraint('role_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('m_role_operation')
    op.drop_table('m_account_role')
    op.drop_table('m_account_group')
    op.drop_table('m_account_base')
    op.drop_table('m_role')
    op.drop_table('m_operation')
    op.drop_table('m_group')
    op.drop_table('m_base')
    op.drop_table('m_prefecture')
    op.drop_table('m_account')
    # ### end Alembic commands ###
